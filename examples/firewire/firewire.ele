module firewire

abstract sig Msg {}
one sig Req, Ack extends Msg {}

sig Node {to, from: set Link} {
  to = {x: Link | x.target = this}
  from = {x: Link | x.source = this}
  }

var sig Waiting, Active, Contending, Elected in Node {}

fact {
	always {
		Waiting & Active = none
		Waiting & Contending = none
		Waiting & Elected = none
		Contending & Active = none
		Contending & Elected = none
		Elected & Active = none
		Waiting + Active + Contending + Elected = Node
	}
}

sig Link {
	target, source: Node, 
	reverse: Link,
	var queue : Queue
} {
  reverse.@source = target
  reverse.@target = source
  }

var sig ParentLinks extends Link {}

/**
 * at most one link between a pair of nodes in a given direction
 */
fact {no x,y: Link | x!=y && x.source = y.source && x.target = y.target}

/**
 * topology is tree-like: acyclic when viewed as an undirected graph
 */

one sig Tree{
   tree: Node->Node
}
{
some root: Node {
  tree in Node lone -> Node
  Node in root.*tree
  no ^tree & iden & Node->Node
  tree + ~tree = ~source.target
  }
}

abstract sig Op {}
one sig Init, AssignParent, ReadReqOrAck, Elect, WriteReqOrAck,
ResolveContention, Stutter extends Op {}

var one sig Happen in Op {}

pred SameState {
  Waiting = Waiting'
  Active = Active'
  Contending = Contending'
  Elected = Elected'
  ParentLinks = ParentLinks'
  all x: Link | SameQueue [queue[x], queue'[x]]
  }

pred Trans {
  Happen' != Init
//  Happen' != Stutter
  Happen' = Stutter => SameState
  Happen' = AssignParent => {
    some x: Link {
      x.target in Waiting & Waiting'
      NoChangeExceptAt [x.target]
      ! IsEmptyQueue [x]
      ParentLinks' = ParentLinks + x
      ReadQueue [x]
      }}
  Happen' = ReadReqOrAck => {
    ParentLinks' = ParentLinks
    some x: Link {
      x.target in (Active + Contending) & (PeekQueue [x, Ack] => Contending' else Active')
      NoChangeExceptAt [x.target]
      ! IsEmptyQueue [x]
      ReadQueue [x]
      }}
  Happen' = Elect => {
    ParentLinks' = ParentLinks
    some n: Node {
      n in Active & Elected'
      NoChangeExceptAt [n]
      n.to in ParentLinks
      QueuesUnchanged [Link]
      }}
  Happen' = WriteReqOrAck => {
    -- note how this requires access to child ptr
    ParentLinks' = ParentLinks
    some n: Node {
      n in Waiting & Active'
      lone n.to - ParentLinks
      NoChangeExceptAt [n]
      all x: n.from | WriteQueue [x, (x.reverse in ParentLinks => Ack else Req)]
      QueuesUnchanged [Link - n.from]
      }}
  Happen' = ResolveContention => {
    some x: Link {
      x.(source + target) in Contending & Active'
      NoChangeExceptAt [x.(source + target)]
      ParentLinks' = ParentLinks + x
      }
    QueuesUnchanged [Link]
    } 
}

pred NoChangeExceptAt [nodes: set Node] {
  (Node - nodes) & Waiting = (Node - nodes) & Waiting'
  (Node - nodes) & Active = (Node - nodes) & Active'
  (Node - nodes) & Contending = (Node - nodes) & Contending'
  (Node - nodes) & Elected = (Node - nodes) & Elected'
  }

sig Queue {slot: lone Msg, overflow: lone Msg}

pred SameQueue [q, q1: Queue] {
    q.slot = q1.slot && q.overflow = q1.overflow
  }

pred ReadQueue [x: Link] {
--  let q = s'.queue[x] | no q.(slot + overflow)
  no queue'[x].(slot + overflow)
  all x1: Link - x | queue'[x1] = queue[x1]
  }

pred PeekQueue [x: Link, m: Msg] {
  m = queue[x].slot
  }

pred WriteQueue [x: Link, m: Msg] {
  no queue[x].slot =>
    ( (queue'[x]).slot = m && no (queue'[x]).overflow) else
    some (queue'[x]).overflow
  }

pred QueuesUnchanged [xs: set Link] {
  all x: xs | queue'[x] = queue[x]
  }

pred IsEmptyQueue [x: Link] {
  no queue[x].(slot + overflow)
--  let q = s.queue[x] | no q.(slot + overflow)
  }

pred Initialization {
  Happen = Init
  Node in Waiting
  no ParentLinks
  all x: Link | IsEmptyQueue [x] 
  }

pred Execution  {
  Initialization
  always { Trans }
  }

pred ElectionHappens {
    Execution
    eventually { some Elected }
//	no Elected
}

assert BadSafety {
  Execution  => (always { lone Elected })
  }

assert BadLiveness {
  Execution  => (eventually { some Elected })
  }

//check BadLiveness for 0 but 3 Node, 4 Link, exactly 3 Queue, 10 Time
//check BadSafety for 0 but 3 Node, 4 Link, exactly 3 Queue, 10 Time


// Firewire (1) scenario for n = 3 (the scope of Op and Msg is fixed)
check BadLiveness for 0 but exactly 0 Node, exactly 0 Link, exactly 3 Queue, 10 Time
check BadLiveness for 0 but exactly 1 Node, exactly 0 Link, exactly 3 Queue, 10 Time
check BadLiveness for 0 but exactly 2 Node, exactly 2 Link, exactly 3 Queue, 10 Time
check BadLiveness for 0 but exactly 3 Node, exactly 4 Link, exactly 3 Queue, 10 Time

// Firewire (2) scenario for n = 3 (the scope of Op and Msg is fixed)
check BadSafety for 0 but exactly 0 Node, exactly 0 Link, exactly 3 Queue, 10 Time
check BadSafety for 0 but exactly 1 Node, exactly 0 Link, exactly 3 Queue, 10 Time
check BadSafety for 0 but exactly 2 Node, exactly 2 Link, exactly 3 Queue, 12 Time
check BadSafety for 0 but exactly 3 Node, exactly 4 Link, exactly 3 Queue, 12 Time

// DEFINED VARIABLES
// Defined variables are uncalled, no-argument functions.
// They are helpful for getting good visualization.
fun queued: Link -> Msg {
  {L: Link, m: Msg | m in L.(queue).slot}
}
//run {}
